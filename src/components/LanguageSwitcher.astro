---
import { getRelativeLocaleUrl } from "astro:i18n";
import { AVAILABLE_LANGUAGES, getTranslationFunction } from "../utils/localization.ts";
import { getEntry } from 'astro:content';

const LANG_CODES_TO_NAMES = (await getEntry('location', 'languages-to-names')).data;
const currentLocale = Astro.currentLocale;
const t = getTranslationFunction(currentLocale);

// Get the path without the locale (e.g /en/... -> /...)
const afterLocalePath = Astro.url.pathname === `/${currentLocale}` ? '' : Astro.url.pathname.replace(`/${currentLocale}/`, '');

---

<div class="relative group">
    <button 
        class="text-white bg-gray-800 hover:bg-gray-700 font-semibold py-1 px-3 rounded flex items-center transition duration-300" 
        aria-haspopup="true" aria-controls="language-dropdown">
        <span>{t(LANG_CODES_TO_NAMES[currentLocale])}</span>
        <svg class="fill-current h-4 w-4 ml-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" aria-hidden="true">
            <path d="M5.516 7.548L10 12.032l4.484-4.484 1.032 1.032L10 14.096 4.484 8.58l1.032-1.032z"/>
        </svg>
    </button>
    <ul 
        id="language-dropdown" 
        class="absolute hidden group-hover:block bg-gray-800 text-white pt-1 rounded shadow-lg z-50 max-h-60 overflow-y-auto"
        role="menu" aria-labelledby="language-dropdown-button">
        {AVAILABLE_LANGUAGES.map(lang => (
            <li role="none">
                <a 
                    class="block py-2 px-4 hover:bg-gray-700 transition duration-300" 
                    href={getRelativeLocaleUrl(lang, afterLocalePath)}
                    role="menuitem">
                    {t(LANG_CODES_TO_NAMES[lang])}
                </a>
            </li>
        ))}
    </ul>
</div>

<style>
    .relative:hover > ul {
        display: block;
    }
</style>

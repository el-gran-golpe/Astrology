---
import { getTopPagesByLang } from '../../utils/staticPathsGeneration.ts';
import Head from '../../components/Head.astro';
import { getEntry } from 'astro:content';
import UpdateVisitedFilms from '../../stores/updateVisitedFilms';
import { getTranslationFunction } from '../../utils/localization.ts';

export async function getStaticPaths() {
  return await getTopPagesByLang();
}

const { filmSlug, lang } = Astro.params;
const filmInfo = Astro.props;

const t = getTranslationFunction(lang);

// Import Tailwind CSS
import "../../layouts/global.css";

// Import components
import FakeLinkTable from '../../components/react/FakeLinkTable';
import NavBar from '../../components/NavBar.astro';
import RatingAndReviews from '../../components/RatingAndReviews.astro';
import MovieStaff from '../../components/MovieStaff.astro';
import LeftColumnInfoPannel from '../../components/LeftColumnInfoPannel.astro';
import Synopsis from '../../components/Synopsis.astro';
import MovieTitleAndYear from '../../components/MovieTitleAndYear.astro';
import { movieInfoToOpenGraph } from '../../utils/utils.ts';

const GENRE_CODES_TO_NAME = (await getEntry('codes', 'genres')).data;

const OpenGraphTags = filmInfo.basic_info.genres.map((genre) => t(GENRE_CODES_TO_NAME[genre]));
// If TV_SE in genres, type is video.tv_show, else video.movie
const OGType = filmInfo.basic_info.genres.includes('TV_SE') ? 'video.tv_show' : 'video.movie';
---

<html lang={lang}>
  <Head
    title={filmInfo.locationInfo.title}
    description={filmInfo.locationInfo.synopsis}
    lang={lang}
    afterLangUrl={filmSlug}
    OGTitle={t("Watch %1 Online").replace("%1", filmInfo.locationInfo.title)}
    OGType={OGType}
    OGImage={filmInfo.extended_info.poster_url}
    OGImageAlt={`${filmInfo.locationInfo.title} Poster`}
    filmInfo={filmInfo}
    OGTags={OpenGraphTags}
  />
  
  <body>
    <NavBar/>
    <div class="bg-gray-900 text-white">

      <!-- Banner -->
      <header class="mb-6 mx-0 w-full h-[33vh] relative overflow-hidden">
        <img src={filmInfo.extended_info.poster_url} alt={`${filmInfo.locationInfo.title} banner`} class="absolute w-full h-full object-cover" />

        <!-- YouTube video iframe -->
        <div class="absolute top-0 left-1/4 w-1/2 h-3/4 z-10">
          <iframe
            src="https://www.youtube.com/embed/JpUd4BS7yI0?rel=0"
            title={`${filmInfo.locationInfo.title} trailer`}
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
            class="w-full h-full"
          ></iframe>
        </div>
        
        <!-- Gradient overlay -->
        <div class="absolute inset-0 z-0">
          <div class="absolute bottom-0 w-full h-1/2 bg-gradient-to-b from-transparent via-transparent to-gray-900"></div>
        </div>
      </header>

      <main class="container mx-auto px-6 py-4" role="main" itemscope itemtype="http://schema.org/Movie">
        <div class="flex">
          <!-- Left column content -->
          <aside class="w-1/3" aria-labelledby="left-column-info">
            <LeftColumnInfoPannel
                posterUrl={filmInfo.extended_info.poster_url}
                genres={filmInfo.basic_info.genres} 
                duration={filmInfo.basic_info.duration_minutes}
                productionCountries={filmInfo.basic_info.countries}
                movieSaga={filmInfo.basic_info.saga}
                otherTitles={filmInfo.basic_info.other_titles}
            />
          </aside>
          
          <!-- Right Column Content -->
          <section class="w-2/3 pl-8" aria-labelledby="right-column-info">
            <MovieTitleAndYear title={filmInfo.locationInfo.title} year={filmInfo.basic_info.year} />
            <RatingAndReviews score={parseFloat(filmInfo.film_affinity_info.score.average)} />
            <Synopsis synopsis={filmInfo.locationInfo.synopsis} />
            <FakeLinkTable client:only="react" lang={Astro.params.lang} availableAt={filmInfo.available_at}/>
            <MovieStaff 
              cast={filmInfo.staff.cast} 
              producers={filmInfo.staff.producers} 
              screenwriters={filmInfo.staff.screenwriters}
              directors={filmInfo.staff.directors}
              musicians={filmInfo.staff.musicians} 
            />
          </section>
        </div>  
      </main>
      
      <!-- Save the visited film in the local-storage to have it accessible for visited films recommendations (crossTab update)-->
      <!-- <UpdateVisitedFilms slug={filmSlug} title={filmInfo.locationInfo.title} posterURL={filmInfo.extended_info.poster_url} client:idle/> -->
    </div>
  </body>
</html>
